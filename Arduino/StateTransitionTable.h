#pragma once

#include "DualButtonController.h"

enum Mode {
  MODE_SLEEP = 0,
  MODE_PERFORM,
  MODE_BRIGHTNESS,
  MODE_PROGRAM_ENTER,
  MODE_PROGRAM,
  MODE_COUNT
};

enum Command {
  DO_NOTHING = 0,
  SLEEP_IMMEDIATE,
  PERFORM_FIRST_CUE,
  PERFORM_NEXT_CUE,
  PERFORM_PREVIOUS_CUE,
  BRIGHTNESS_INCREASE,
  BRIGHTNESS_DECREASE,
  PROGRAM_FIRST_CUE,
  PROGRAM_NEXT_CUE,
  PROGRAM_DELETE_CUE,
  PROGRAM_INSERT_CUE,
  PROGRAM_ERASE_ALL_CUES,
  PROGRAM_CHANGE_COLOR1,
  PROGRAM_CHANGE_COLOR2,
  PROGRAM_CHANGE_ANIMATION,
  COMMAND_COUNT
};

using namespace DualButtons;

struct StateTransition {
  bool isMatch(Mode mode, Button btn, Event evt) const { return mode == currentMode && btn == button && evt == buttonEvent; }
  
  Mode currentMode;
  Button button;
  Event buttonEvent;
  Mode nextMode;
  Command command;
  DualButtons::Request buttonRequest;
};

constexpr StateTransition stateTransitionTable[] = {
  { MODE_SLEEP, BUTTON_A, PRESS, MODE_PERFORM, PERFORM_FIRST_CUE, NO_BUTTON_REQUEST },
  { MODE_SLEEP, BUTTON_B, PRESS, MODE_PERFORM, PERFORM_FIRST_CUE, NO_BUTTON_REQUEST },
  { MODE_SLEEP, BUTTONS_A_B_TOGETHER, HOLD, MODE_PROGRAM_ENTER, PERFORM_FIRST_CUE, NO_BUTTON_REQUEST },
  
  { MODE_PERFORM, BUTTONS_A_B_TOGETHER, PRESS, MODE_SLEEP, DO_NOTHING, NO_BUTTON_REQUEST },
  { MODE_PERFORM, BUTTON_A, PRESS, MODE_PERFORM, PERFORM_NEXT_CUE, NO_BUTTON_REQUEST },
  { MODE_PERFORM, BUTTON_B, PRESS, MODE_PERFORM, PERFORM_NEXT_CUE, NO_BUTTON_REQUEST },
  { MODE_PERFORM, BUTTONS_A_B_TOGETHER, HOLD, MODE_PROGRAM_ENTER, DO_NOTHING, NO_BUTTON_REQUEST },
  { MODE_PERFORM, BUTTON_A, HOLD, MODE_BRIGHTNESS, PERFORM_PREVIOUS_CUE, NO_BUTTON_REQUEST },
  { MODE_PERFORM, BUTTON_B, HOLD, MODE_BRIGHTNESS, PERFORM_PREVIOUS_CUE, SWAP_BUTTONS_ON_RELEASE },

  { MODE_BRIGHTNESS, BUTTON_A, SINGLE_TAP, MODE_BRIGHTNESS, BRIGHTNESS_INCREASE, NO_BUTTON_REQUEST },
  { MODE_BRIGHTNESS, BUTTON_B, SINGLE_TAP, MODE_BRIGHTNESS, BRIGHTNESS_DECREASE, NO_BUTTON_REQUEST },
  { MODE_BRIGHTNESS, BUTTON_A, HOLD, MODE_PERFORM, DO_NOTHING, NO_BUTTON_REQUEST },
  { MODE_BRIGHTNESS, BUTTON_B, HOLD, MODE_PERFORM, DO_NOTHING, NO_BUTTON_REQUEST },

  { MODE_PROGRAM_ENTER, BUTTON_A, SINGLE_TAP, MODE_PROGRAM, PROGRAM_FIRST_CUE, NO_BUTTON_REQUEST },
  { MODE_PROGRAM_ENTER, BUTTON_B, SINGLE_TAP, MODE_PROGRAM, PROGRAM_FIRST_CUE, SWAP_BUTTONS_ON_RELEASE },
  { MODE_PROGRAM_ENTER, BUTTON_A, DOUBLE_TAP, MODE_PROGRAM, PROGRAM_ERASE_ALL_CUES, NO_BUTTON_REQUEST },
  { MODE_PROGRAM_ENTER, BUTTON_B, DOUBLE_TAP, MODE_PROGRAM, PROGRAM_ERASE_ALL_CUES, SWAP_BUTTONS_ON_RELEASE },
  
  { MODE_PROGRAM, BUTTONS_A_B_TOGETHER, PRESS, MODE_SLEEP, DO_NOTHING, NO_BUTTON_REQUEST },
  { MODE_PROGRAM, BUTTON_A, SINGLE_TAP, MODE_PROGRAM, PROGRAM_NEXT_CUE, NO_BUTTON_REQUEST },
  { MODE_PROGRAM, BUTTON_A, DOUBLE_TAP, MODE_PROGRAM, PROGRAM_DELETE_CUE, NO_BUTTON_REQUEST },
  { MODE_PROGRAM, BUTTON_A, HOLD, MODE_PROGRAM, PROGRAM_INSERT_CUE, NO_BUTTON_REQUEST },
  { MODE_PROGRAM, BUTTON_B, SINGLE_TAP, MODE_PROGRAM, PROGRAM_CHANGE_COLOR1, NO_BUTTON_REQUEST },
  { MODE_PROGRAM, BUTTON_B, DOUBLE_TAP, MODE_PROGRAM, PROGRAM_CHANGE_COLOR2, NO_BUTTON_REQUEST },
  { MODE_PROGRAM, BUTTON_B, HOLD, MODE_PROGRAM, PROGRAM_CHANGE_ANIMATION, NO_BUTTON_REQUEST },
};

